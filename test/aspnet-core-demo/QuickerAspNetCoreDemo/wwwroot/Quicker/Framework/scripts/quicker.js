var quicker = quicker || {};
(function ($) {

    /* Application paths *****************************************/

    //Current application root path (including virtual directory if exists).
    quicker.appPath = quicker.appPath || '/';

    quicker.pageLoadTime = new Date();

    //Converts given path to absolute path using quicker.appPath variable.
    quicker.toAbsAppPath = function (path) {
        if (path.indexOf('/') == 0) {
            path = path.substring(1);
        }

        return quicker.appPath + path;
    };

    /* LOCALIZATION ***********************************************/
    //Implements Localization API that simplifies usage of localization scripts generated by Quicker.

    quicker.localization = quicker.localization || {};

    quicker.localization.localize = function (key, sourceName) {
        sourceName = sourceName || quicker.localization.defaultSourceName;

        var source = quicker.localization.values[sourceName];

        if (!source) {
            quicker.log.warn('Could not find localization source: ' + sourceName);
            return key;
        }

        var value = source[key];
        if (value == undefined) {
            return key;
        }

        var copiedArguments = Array.prototype.slice.call(arguments, 0);
        copiedArguments.splice(1, 1);
        copiedArguments[0] = value;

        return quicker.utils.formatString.apply(this, copiedArguments);
    };

    quicker.localization.getSource = function (sourceName) {
        return function (key) {
            var copiedArguments = Array.prototype.slice.call(arguments, 0);
            copiedArguments.splice(1, 0, sourceName);
            return quicker.localization.localize.apply(this, copiedArguments);
        };
    };

    quicker.localization.isCurrentCulture = function (name) {
        return quicker.localization.currentCulture
            && quicker.localization.currentCulture.name
            && quicker.localization.currentCulture.name.indexOf(name) == 0;
    };

    quicker.localization.defaultSourceName = undefined;
    quicker.localization.quickerWeb = quicker.localization.getSource('QuickerWeb');

    /* AUTHORIZATION **********************************************/
    //Implements Authorization API that simplifies usage of authorization scripts generated by Quicker.

    quicker.auth = quicker.auth || {};

    quicker.auth.allPermissions = quicker.auth.allPermissions || {};

    quicker.auth.grantedPermissions = quicker.auth.grantedPermissions || {};

    //Deprecated. Use quicker.auth.isGranted instead.
    quicker.auth.hasPermission = function (permissionName) {
        return quicker.auth.isGranted.apply(this, arguments);
    };

    //Deprecated. Use quicker.auth.isAnyGranted instead.
    quicker.auth.hasAnyOfPermissions = function () {
        return quicker.auth.isAnyGranted.apply(this, arguments);
    };

    //Deprecated. Use quicker.auth.areAllGranted instead.
    quicker.auth.hasAllOfPermissions = function () {
        return quicker.auth.areAllGranted.apply(this, arguments);
    };

    quicker.auth.isGranted = function (permissionName) {
        return quicker.auth.grantedPermissions[permissionName] != undefined;
    };

    quicker.auth.isAnyGranted = function () {
        if (!arguments || arguments.length <= 0) {
            return true;
        }

        for (var i = 0; i < arguments.length; i++) {
            if (quicker.auth.isGranted(arguments[i])) {
                return true;
            }
        }

        return false;
    };

    quicker.auth.areAllGranted = function () {
        if (!arguments || arguments.length <= 0) {
            return true;
        }

        for (var i = 0; i < arguments.length; i++) {
            if (!quicker.auth.isGranted(arguments[i])) {
                return false;
            }
        }

        return true;
    };

    /* FEATURE SYSTEM *********************************************/
    //Implements Features API that simplifies usage of feature scripts generated by Quicker.

    quicker.features = quicker.features || {};

    quicker.features.allFeatures = quicker.features.allFeatures || {};

    quicker.features.get = function (name) {
        return quicker.features.allFeatures[name];
    }

    quicker.features.getValue = function (name) {
        var feature = quicker.features.get(name);
        if (feature == undefined) {
            return undefined;
        }

        return feature.value;
    }

    quicker.features.isEnabled = function (name) {
        var value = quicker.features.getValue(name);
        return value == 'true' || value == 'True';
    }

    /* SETTINGS **************************************************/
    //Implements Settings API that simplifies usage of setting scripts generated by Quicker.

    quicker.setting = quicker.setting || {};

    quicker.setting.values = quicker.setting.values || {};

    quicker.setting.get = function (name) {
        return quicker.setting.values[name];
    };

    quicker.setting.getBoolean = function (name) {
        var value = quicker.setting.get(name);
        return value == 'true' || value == 'True';
    };

    quicker.setting.getInt = function (name) {
        return parseInt(quicker.setting.values[name]);
    };

    /* REALTIME NOTIFICATIONS ************************************/

    quicker.notifications = quicker.notifications || {};

    quicker.notifications.severity = {
        INFO: 0,
        SUCCESS: 1,
        WARN: 2,
        ERROR: 3,
        FATAL: 4
    };

    quicker.notifications.userNotificationState = {
        UNREAD: 0,
        READ: 1
    };

    quicker.notifications.getUserNotificationStateAsString = function (userNotificationState) {
        switch (userNotificationState) {
            case quicker.notifications.userNotificationState.READ:
                return 'READ';
            case quicker.notifications.userNotificationState.UNREAD:
                return 'UNREAD';
            default:
                quicker.log.warn('Unknown user notification state value: ' + userNotificationState)
                return '?';
        }
    };

    quicker.notifications.getUiNotifyFuncBySeverity = function (severity) {
        switch (severity) {
            case quicker.notifications.severity.SUCCESS:
                return quicker.notify.success;
            case quicker.notifications.severity.WARN:
                return quicker.notify.warn;
            case quicker.notifications.severity.ERROR:
                return quicker.notify.error;
            case quicker.notifications.severity.FATAL:
                return quicker.notify.error;
            case quicker.notifications.severity.INFO:
            default:
                return quicker.notify.info;
        }
    };

    quicker.notifications.messageFormatters = {};

    quicker.notifications.messageFormatters['Quicker.Notifications.MessageNotificationData'] = function (userNotification) {
        return userNotification.notification.data.message;
    };

    quicker.notifications.messageFormatters['Quicker.Notifications.LocalizableMessageNotificationData'] = function (userNotification) {
        var localizedMessage = quicker.localization.localize(
            userNotification.notification.data.message.name,
            userNotification.notification.data.message.sourceName
        );

        if (userNotification.notification.data.properties) {
            if ($) {
                //Prefer to use jQuery if possible
                $.each(userNotification.notification.data.properties, function (key, value) {
                    localizedMessage = localizedMessage.replace('{' + key + '}', value);
                });
            } else {
                //alternative for $.each
                var properties = Object.keys(userNotification.notification.data.properties);
                for (var i = 0; i < properties.length; i++) {
                    localizedMessage = localizedMessage.replace('{' + properties[i] + '}', userNotification.notification.data.properties[properties[i]]);
                }
            }
        }

        return localizedMessage;
    };

    quicker.notifications.getFormattedMessageFromUserNotification = function (userNotification) {
        var formatter = quicker.notifications.messageFormatters[userNotification.notification.data.type];
        if (!formatter) {
            quicker.log.warn('No message formatter defined for given data type: ' + userNotification.notification.data.type)
            return '?';
        }

        if (!quicker.utils.isFunction(formatter)) {
            quicker.log.warn('Message formatter should be a function! It is invalid for data type: ' + userNotification.notification.data.type)
            return '?';
        }

        return formatter(userNotification);
    }

    quicker.notifications.showUiNotifyForUserNotification = function (userNotification, options) {
        var message = quicker.notifications.getFormattedMessageFromUserNotification(userNotification);
        var uiNotifyFunc = quicker.notifications.getUiNotifyFuncBySeverity(userNotification.notification.severity);
        uiNotifyFunc(message, undefined, options);
    }

    /* LOGGING ***************************************************/
    //Implements Logging API that provides secure & controlled usage of console.log

    quicker.log = quicker.log || {};

    quicker.log.levels = {
        DEBUG: 1,
        INFO: 2,
        WARN: 3,
        ERROR: 4,
        FATAL: 5
    };

    quicker.log.level = quicker.log.levels.DEBUG;

    quicker.log.log = function (logObject, logLevel) {
        if (!window.console || !window.console.log) {
            return;
        }

        if (logLevel != undefined && logLevel < quicker.log.level) {
            return;
        }

        console.log(logObject);
    };

    quicker.log.debug = function (logObject) {
        quicker.log.log("DEBUG: ", quicker.log.levels.DEBUG);
        quicker.log.log(logObject, quicker.log.levels.DEBUG);
    };

    quicker.log.info = function (logObject) {
        quicker.log.log("INFO: ", quicker.log.levels.INFO);
        quicker.log.log(logObject, quicker.log.levels.INFO);
    };

    quicker.log.warn = function (logObject) {
        quicker.log.log("WARN: ", quicker.log.levels.WARN);
        quicker.log.log(logObject, quicker.log.levels.WARN);
    };

    quicker.log.error = function (logObject) {
        quicker.log.log("ERROR: ", quicker.log.levels.ERROR);
        quicker.log.log(logObject, quicker.log.levels.ERROR);
    };

    quicker.log.fatal = function (logObject) {
        quicker.log.log("FATAL: ", quicker.log.levels.FATAL);
        quicker.log.log(logObject, quicker.log.levels.FATAL);
    };

    /* NOTIFICATION *********************************************/
    //Defines Notification API, not implements it

    quicker.notify = quicker.notify || {};

    quicker.notify.success = function (message, title, options) {
        quicker.log.warn('quicker.notify.success is not implemented!');
    };

    quicker.notify.info = function (message, title, options) {
        quicker.log.warn('quicker.notify.info is not implemented!');
    };

    quicker.notify.warn = function (message, title, options) {
        quicker.log.warn('quicker.notify.warn is not implemented!');
    };

    quicker.notify.error = function (message, title, options) {
        quicker.log.warn('quicker.notify.error is not implemented!');
    };

    /* MESSAGE **************************************************/
    //Defines Message API, not implements it

    quicker.message = quicker.message || {};

    var showMessage = function (message, title) {
        alert((title || '') + ' ' + message);

        if (!$) {
            quicker.log.warn('quicker.message can not return promise since jQuery is not defined!');
            return null;
        }

        return $.Deferred(function ($dfd) {
            $dfd.resolve();
        });
    };

    quicker.message.info = function (message, title) {
        quicker.log.warn('quicker.message.info is not implemented!');
        return showMessage(message, title);
    };

    quicker.message.success = function (message, title) {
        quicker.log.warn('quicker.message.success is not implemented!');
        return showMessage(message, title);
    };

    quicker.message.warn = function (message, title) {
        quicker.log.warn('quicker.message.warn is not implemented!');
        return showMessage(message, title);
    };

    quicker.message.error = function (message, title) {
        quicker.log.warn('quicker.message.error is not implemented!');
        return showMessage(message, title);
    };

    quicker.message.confirm = function (message, titleOrCallback, callback) {
        quicker.log.warn('quicker.message.confirm is not implemented!');

        if (titleOrCallback && !(typeof titleOrCallback == 'string')) {
            callback = titleOrCallback;
        }

        var result = confirm(message);
        callback && callback(result);

        if (!$) {
            quicker.log.warn('quicker.message can not return promise since jQuery is not defined!');
            return null;
        }

        return $.Deferred(function ($dfd) {
            $dfd.resolve();
        });
    };

    /* UI *******************************************************/

    quicker.ui = quicker.ui || {};

    /* UI BLOCK */
    //Defines UI Block API, not implements it

    quicker.ui.block = function (elm) {
        quicker.log.warn('quicker.ui.block is not implemented!');
    };

    quicker.ui.unblock = function (elm) {
        quicker.log.warn('quicker.ui.unblock is not implemented!');
    };

    /* UI BUSY */
    //Defines UI Busy API, not implements it

    quicker.ui.setBusy = function (elm, optionsOrPromise) {
        quicker.log.warn('quicker.ui.setBusy is not implemented!');
    };

    quicker.ui.clearBusy = function (elm) {
        quicker.log.warn('quicker.ui.clearBusy is not implemented!');
    };

    /* SIMPLE EVENT BUS *****************************************/

    quicker.event = (function () {

        var _callbacks = {};

        var on = function (eventName, callback) {
            if (!_callbacks[eventName]) {
                _callbacks[eventName] = [];
            }

            _callbacks[eventName].push(callback);
        };

        var off = function (eventName, callback) {
            var callbacks = _callbacks[eventName];
            if (!callbacks) {
                return;
            }

            var index = -1;
            for (var i = 0; i < callbacks.length; i++) {
                if (callbacks[i] === callback) {
                    index = i;
                    break;
                }
            }

            if (index < 0) {
                return;
            }

            _callbacks[eventName].splice(index, 1);
        };

        var trigger = function (eventName) {
            var callbacks = _callbacks[eventName];
            if (!callbacks || !callbacks.length) {
                return;
            }

            var args = Array.prototype.slice.call(arguments, 1);
            for (var i = 0; i < callbacks.length; i++) {
                callbacks[i].apply(this, args);
            }
        };

        // Public interface ///////////////////////////////////////////////////

        return {
            on: on,
            off: off,
            trigger: trigger
        };
    })();


    /* UTILS ***************************************************/

    quicker.utils = quicker.utils || {};

    /* Creates a name namespace.
    *  Example:
    *  var taskService = quicker.utils.createNamespace(quicker, 'services.task');
    *  taskService will be equal to quicker.services.task
    *  first argument (root) must be defined first
    ************************************************************/
    quicker.utils.createNamespace = function (root, ns) {
        var parts = ns.split('.');
        for (var i = 0; i < parts.length; i++) {
            if (typeof root[parts[i]] == 'undefined') {
                root[parts[i]] = {};
            }

            root = root[parts[i]];
        }

        return root;
    };

    /* Find and replaces a string (search) to another string (replacement) in
    *  given string (str).
    *  Example:
    *  quicker.utils.replaceAll('This is a test string', 'is', 'X') = 'ThX X a test string'
    ************************************************************/
    quicker.utils.replaceAll = function (str, search, replacement) {
        var fix = search.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        return str.replace(new RegExp(fix, 'g'), replacement);
    };

    /* Formats a string just like string.format in C#.
    *  Example:
    *  quicker.utils.formatString('Hello {0}','Tuana') = 'Hello Tuana'
    ************************************************************/
    quicker.utils.formatString = function () {
        if (arguments.length < 1) {
            return null;
        }

        var str = arguments[0];

        for (var i = 1; i < arguments.length; i++) {
            var placeHolder = '{' + (i - 1) + '}';
            str = quicker.utils.replaceAll(str, placeHolder, arguments[i]);
        }

        return str;
    };

    quicker.utils.toPascalCase = function (str) {
        if (!str || !str.length) {
            return str;
        }

        if (str.length === 1) {
            return str.charAt(0).toUpperCase();
        }

        return str.charAt(0).toUpperCase() + str.substr(1);
    }

    quicker.utils.toCamelCase = function (str) {
        if (!str || !str.length) {
            return str;
        }

        if (str.length === 1) {
            return str.charAt(0).toLowerCase();
        }

        return str.charAt(0).toLowerCase() + str.substr(1);
    }

    quicker.utils.truncateString = function (str, maxLength) {
        if (!str || !str.length || str.length <= maxLength) {
            return str;
        }

        return str.substr(0, maxLength);
    };

    quicker.utils.truncateStringWithPostfix = function (str, maxLength, postfix) {
        postfix = postfix || '...';

        if (!str || !str.length || str.length <= maxLength) {
            return str;
        }

        if (maxLength <= postfix.length) {
            return postfix.substr(0, maxLength);
        }

        return str.substr(0, maxLength - postfix.length) + postfix;
    };

    quicker.utils.isFunction = function (obj) {
        if ($) {
            //Prefer to use jQuery if possible
            return $.isFunction(obj);
        }

        //alternative for $.isFunction
        return !!(obj && obj.constructor && obj.call && obj.apply);
    };

    /**
     * parameterInfos should be an array of { name, value } objects
     * where name is query string parameter name and value is it's value.
     * includeQuestionMark is true by default.
     */
    quicker.utils.buildQueryString = function (parameterInfos, includeQuestionMark) {
        if (includeQuestionMark === undefined) {
            includeQuestionMark = true;
        }

        var qs = '';

        for (var i = 0; i < parameterInfos.length; ++i) {
            var parameterInfo = parameterInfos[i];
            if (parameterInfo.value === undefined) {
                continue;
            }

            if (!qs.length) {
                if (includeQuestionMark) {
                    qs = qs + '?';
                }
            } else {
                qs = qs + '&';
            }

            qs = qs + parameterInfo.name + '=' + encodeURIComponent(parameterInfo.value);
        }

        return qs;
    }

    /**
     * Sets a cookie value for given key.
     * @param {string} key
     * @param {string} value 
     * @param {Date} expireDate Optional expire date (default: 30 days).
     */
    quicker.utils.setCookieValue = function (key, value, expireDate) {
        if (!expireDate) {
            expireDate = new Date();
            expireDate.setDate(expireDate.getDate() + 30);
        }

        document.cookie = encodeURIComponent(key) + '=' + encodeURIComponent(value) + "; expires=" + expireDate.toUTCString();
    };

    /**
     * Gets a cookie with given key.
     * @param {string} key
     * @returns {string} Cookie value
     */
    quicker.utils.getCookieValue = function (key) {
        var equalities = document.cookie.split('; ');
        for (var i = 0; i < equalities.length; i++) {
            if (!equalities[i]) {
                continue;
            }

            var splitted = equalities[i].split('=');
            if (splitted.length != 2) {
                continue;
            }

            if (decodeURIComponent(splitted[0]) === key) {
                return decodeURIComponent(splitted[1] || '');
            }
        }

        return null;
    };

    /* TIMING *****************************************/
    quicker.timing = quicker.timing || {};

    quicker.timing.utcClockProvider = (function () {

        var toUtc = function (date) {
            return Date.UTC(
                date.getUTCFullYear()
                , date.getUTCMonth()
                , date.getUTCDate()
                , date.getUTCHours()
                , date.getUTCMinutes()
                , date.getUTCSeconds()
                , date.getUTCMilliseconds()
            );
        }

        var now = function () {
            return new Date();
        };

        var normalize = function (date) {
            if (!date) {
                return date;
            }

            return new Date(toUtc(date));
        };

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize
        };
    })();

    quicker.timing.localClockProvider = (function () {

        var toLocal = function (date) {
            return new Date(
                date.getFullYear()
                , date.getMonth()
                , date.getDate()
                , date.getHours()
                , date.getMinutes()
                , date.getSeconds()
                , date.getMilliseconds()
            );
        }

        var now = function () {
            return toLocal(new Date());
        }

        var normalize = function (date) {
            if (!date) {
                return date;
            }

            return toLocal(date);
        }

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize
        };
    })();

    quicker.timing.unspecifiedClockProvider = (function () {

        var now = function () {
            return new Date();
        }

        var normalize = function (date) {
            return date;
        }

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize
        };
    })();

    quicker.timing.convertToUserTimezone = function (date) {
        var localTime = date.getTime();
        var utcTime = localTime + (date.getTimezoneOffset() * 60000);
        var targetTime = parseInt(utcTime) + parseInt(quicker.timing.timeZoneInfo.windows.currentUtcOffsetInMilliseconds);
        return new Date(targetTime);
    };

    /* CLOCK *****************************************/
    quicker.clock = quicker.clock || {};

    quicker.clock.now = function () {
        if (quicker.clock.provider) {
            return quicker.clock.provider.now();
        }

        return new Date();
    }

    quicker.clock.normalize = function (date) {
        if (quicker.clock.provider) {
            return quicker.clock.provider.normalize(date);
        }

        return date;
    }

    quicker.clock.provider = quicker.timing.unspecifiedClockProvider;

    /* SECURITY ***************************************/
    quicker.security = quicker.security || {};
    quicker.security.antiForgery = quicker.security.antiForgery || {};

    quicker.security.antiForgery.tokenCookieName = 'XSRF-TOKEN';
    quicker.security.antiForgery.tokenHeaderName = 'X-XSRF-TOKEN';

    quicker.security.antiForgery.getToken = function () {
        return quicker.utils.getCookieValue(quicker.security.antiForgery.tokenCookieName);
    };

})(jQuery);